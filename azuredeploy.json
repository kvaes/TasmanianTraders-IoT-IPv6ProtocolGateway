{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password"
      }
    },
    "dnsNameforIPv4LbIP": {
      "type": "string",
      "metadata": {
        "description": "DNS prefix for IPv4 IP Address of the load balancer. It must be lowercase and match the regex: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$."
      }
    },
    "dnsNameforIPv6LbIP": {
      "type": "string",
      "metadata": {
        "description": "DNS prefix for IPv6 IP Address of the load balancer. It must be lowercase and match the regex: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$."
      }
    },
    "envHostname": {
      "type": "string",
      "metadata": {
        "description": "Event Hub Hostname"
      }
    },
    "envHubConnectionstring": {
      "type": "string",
      "metadata": {
        "description": "Event Hub Connection String"
      }
    },
    "envRedisHostname": {
      "type": "string",
      "metadata": {
        "description": "Redis Hostname"
      }
    },
    "envRedisKey": {
      "type": "string",
      "metadata": {
        "description": "Redis Secret/Key"
      }
    }
  },
  "variables": {
    "vmSize": "Standard_B1s",
    "adminUsername": "[parameters('adminusername')]",
    "adminPassword": "[parameters('adminPassword')]",
    "dnsNameforIPv4LbIP": "[parameters('dnsNameforIPv4LbIP')]",
    "dnsNameforIPv6LbIP": "[parameters('dnsNameforIPv6LbIP')]",
    "genericPrefix": "IPV6",
    "vmNamePrefix": "[concat(variables('genericPrefix'),'-VM')]",
    "nicNamePrefix": "[concat(variables('genericPrefix'),'-NIC')]",
    "availabilitySetName": "[concat(variables('genericPrefix'),'-AS')]",
    "vnetName": "[concat(variables('genericPrefix'),'-VNET')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "[concat(variables('genericPrefix'),'-SUBNET')]",
    "subnetPrefix": "10.0.0.0/24",
    "ipv4PrivateIPAddressType": "Dynamic",
    "ipv6PrivateIPAddressType": "Dynamic",
    "numberOfInstances": 2,
    "lbName": "[concat(variables('genericPrefix'),'-LB')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName'))]",
    "ipv4FrontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/LoadBalancerFrontEndIPv4')]",
    "ipv6FrontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/LoadBalancerFrontEndIPv6')]",
    "ipv4LbBackendPoolID": "[concat(variables('lbID'),'/backendAddressPools/BackendPoolIPv4')]",
    "ipv6LbBackendPoolID": "[concat(variables('lbID'),'/backendAddressPools/BackendPoolIPv6')]",
    "ipv4ipv6lbProbeName": "[concat(variables('lbName'),'-PROBE')]",
    "ipv4ipv6lbProbeID": "[concat(variables('lbID'),'/probes/', variables('ipv4ipv6lbProbeName'))]",
    "ipv6PublicIPAddressName": "[concat(variables('lbName'),'-IPV6PIP')]",
    "ipv4PublicIPAddressName": "[concat(variables('lbName'),'-IPV4PIP')]",
    "ipv4PublicIPAddressType": "Dynamic",
    "ipv6PublicIPAddressType": "Dynamic",
    "extensionName": "DockerExtension",
    "asNumberOfFaultDomains": 3,
    "asNumberOfUpdateDomains": 5,
    "asManagedDisks": true,
    "envHostname": "[parameters('envHostname')]",
    "envHubConnectionstring": "[parameters('envHubConnectionstring')]",
    "envRedisHostname": "[parameters('envRedisHostname')]",
    "envRedisKey": "[parameters('envRedisKey')]"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "2016-04-30-preview",
      "location": "[resourceGroup().location]",
      "properties": {
        "platformFaultDomainCount": "[variables('asNumberOfFaultDomains')]",
        "platformUpdateDomainCount": "[variables('asNumberOfFaultDomains')]",
        "managed": "[variables('asManagedDisks')]"
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('ipv4PublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "[variables('ipv4PublicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameforIPv4LbIP')]"
        }
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('ipv6PublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAddressVersion": "IPv6",
        "publicIPAllocationMethod": "[variables('ipv6PublicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameforIPv6LbIP')]"
        }
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2018-01-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNamePrefix'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('lbName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipv4IPConfig",
            "properties": {
              "privateIPAddressVersion": "IPv4",
              "privateIPAllocationMethod": "[variables('ipv4PrivateIPAddressType')]",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets',variables('vnetName'), variables('subnetName'))]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('ipv4LbBackendPoolID')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbID'),'/inboundNatRules/SSH-VM', copyindex())]"
                }
              ]
            }
          },
          {
            "name": "ipv6IPConfig",
            "properties": {
              "privateIPAddressVersion": "IPv6",
              "privateIPAllocationMethod": "[variables('ipv6PrivateIPAddressType')]",
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('ipv6LbBackendPoolID')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "name": "[variables('lbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('ipv4PublicIPAddressName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('ipv6PublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEndIPv4",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('ipv4PublicIPAddressName'))]"
              }
            }
          },
          {
            "name": "LoadBalancerFrontEndIPv6",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('ipv6PublicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "BackendPoolIPv4"
          },
          {
            "name": "BackendPoolIPv6"
          }
        ],
        "inboundNatRules": [
          {
            "name": "SSH-VM0",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('ipv4FrontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 65022,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "SSH-VM1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('ipv4FrontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPort": 65122,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule1812IPv4",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('ipv4FrontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('ipv4LbBackendPoolID')]"
              },
              "protocol": "Udp",
              "frontendPort": 1812,
              "backendPort": 1813,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('ipv4ipv6lbProbeID')]"
              }
            }
          },
          {
            "name": "LBRule8080IPv4",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('ipv4FrontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('ipv4LbBackendPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 8080,
              "backendPort": 8081,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('ipv4ipv6lbProbeID')]"
              }
            }
          },
          {
            "name": "LBRule41234IPv4",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('ipv4FrontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('ipv4LbBackendPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 41234,
              "backendPort": 41235,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('ipv4ipv6lbProbeID')]"
              }
            }
          },
          {
            "name": "LBRule51000IPv4",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('ipv4FrontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('ipv4LbBackendPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 51000,
              "backendPort": 51001,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('ipv4ipv6lbProbeID')]"
              }
            }
          },
          {
            "name": "LBRule1812IPv6",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('ipv6FrontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('ipv6LbBackendPoolID')]"
              },
              "protocol": "Udp",
              "frontendPort": 1812,
              "backendPort": 1812,
              "probe": {
                "id": "[variables('ipv4ipv6lbProbeID')]"
              }
            }
          },
          {
            "name": "LBRule8080IPv6",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('ipv6FrontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('ipv6LbBackendPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 8080,
              "backendPort": 8080,
              "probe": {
                "id": "[variables('ipv4ipv6lbProbeID')]"
              }
            }
          },
          {
            "name": "LBRule41234IPv6",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('ipv6FrontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('ipv6LbBackendPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 41234,
              "backendPort": 41234,
              "probe": {
                "id": "[variables('ipv4ipv6lbProbeID')]"
              }
            }
          },
          {
            "name": "LBRule51000IPv6",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('ipv6FrontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('ipv6LbBackendPoolID')]"
              },
              "protocol": "Tcp",
              "frontendPort": 51000,
              "backendPort": 51000,
              "probe": {
                "id": "[variables('ipv4ipv6lbProbeID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('ipv4ipv6lbProbeName')]",
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNamePrefix'), copyindex())]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNamePrefix'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNamePrefix'), copyIndex())]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "18.04-LTS",
            "version": "Latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicNamePrefix'),copyindex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNamePrefix'),copyindex(),'/', variables('extensionName'))]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[variables('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmNamePrefix'), copyindex())]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "DockerExtension",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "docker": {
            "port": "2375"
          },
          "compose-environment": {
            "HOSTNAME": "[variables('envHostname')]",
            "HUBCS": "[variables('envHubConnectionstring')]",
            "REDISCACHEHOSTNAME": "[variables('envRedisHostname')]",
            "REDISCACHEKEY": "[variables('envRedisKey')]"
          },
          "compose": {
            "wordpress": {
              "image": "kvaes/tasmaniantraders-iot-protocolgateway:latest",
              "restart": "always",
              "ports": [
                "1812:1812",
                "1813:1812",
                "8080:8080",
                "8081:8080",
                "41234:41234",
                "41235:41234",
                "51000:51000",
                "51001:51000"
              ]
            }
          }
        }
      }
    }
  ]
}